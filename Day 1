Given an array nums of size n, return the majority element.
The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

class Solution(object):
    def majorityElement(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        candidate = None
        count = 0

        for num in nums:
            if count == 0:
                candidate = num
                count = 1
            elif num == candidate:
                count += 1
            else:
                count -= 1

        return candidate


You are given a 0-indexed 2D integer matrix grid of size n * n with values in the range [1, n2]. Each integer appears exactly once except a which appears twice and b which is missing. The task is to find the repeating and missing numbers a and b.

Return a 0-indexed integer array ans of size 2 where ans[0] equals to a and ans[1] equals to b.

class Solution(object):
    def findMissingAndRepeatedValues(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: List[int]
        """
        n = len(grid)
        max_num = n * n
        num_count = {}

        # Flatten the grid and count each number's occurrences
        for row in grid:
            for num in row:
                if num in num_count:
                    num_count[num] += 1
                else:
                    num_count[num] = 1

        # Identify the repeating and missing numbers
        repeating = missing = None
        for i in range(1, max_num + 1):
            if i in num_count:
                if num_count[i] == 2:
                    repeating = i
            else:
                missing = i

        return [repeating, missing]
